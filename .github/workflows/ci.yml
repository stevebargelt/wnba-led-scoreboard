name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: web-admin/package-lock.json

    - name: Install dependencies
      working-directory: ./web-admin
      run: npm ci

    - name: Run type checking
      working-directory: ./web-admin
      run: npm run type-check

    - name: Run linting
      working-directory: ./web-admin
      run: npm run lint

    - name: Run tests with coverage
      working-directory: ./web-admin
      run: npm run test:ci

    - name: Set up Python
      if: matrix.node-version == '20.x'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      if: matrix.node-version == '20.x'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python unit tests
      if: matrix.node-version == '20.x'
      run: python -m unittest discover

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./web-admin/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: web-admin/package-lock.json

    - name: Install dependencies
      working-directory: ./web-admin
      run: npm ci

    - name: Build application
      working-directory: ./web-admin
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: web-admin/.next/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: web-admin/package-lock.json

    - name: Install dependencies
      working-directory: ./web-admin
      run: npm ci

    - name: Run security audit
      working-directory: ./web-admin
      run: npm audit --audit-level moderate

    - name: Run dependency check
      working-directory: ./web-admin
      run: npx audit-ci --moderate

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: web-admin/.next/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # Example: deploy to Vercel, Netlify, or custom server

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: web-admin/.next/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # Example: deploy to Vercel, Netlify, or custom server

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "Deployment successful!"
          # Add notification logic here (Slack, Discord, email, etc.)
        else
          echo "Deployment failed or skipped"
        fi
